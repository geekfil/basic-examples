#Define the manifest mandatory option: type
type: update 

#Optional parameter. If id is not specified it will be generated automatically
id: daas-addon

#Defines the required name parameter
name: DaaS Add-On

#Optional parameter, logo that will be displayed in the Marketplace or installation window
logo: http://raw.githubusercontent.com/jelastic-jps/basic-examples/master/daas-addon/images/daas-logo-nomachine-small.png

#Describe the nodeType the add-on may be installed on. The targetNodes filters available nodes in the environment to fit the required nodeType
targetNodes:
  nodeType: 
    - javaengine,tomcat,glassfish,wildfly,springboot
    - vds
    - storage

#Optional parameters help users to get a better understanding of the package 
description: 
  text: Install Add-On on any node in order to create Cloud Desktop with Gnome Display Manager and access it via [NoMachine technology](https://www.nomachine.com/)
  short: Use DaaS Add-On to run your workspace in the Cloud 

#The globals declaration has two placeholders defined within global scope:
globals:
#The ${globals.password} contains a randomly generated password
  password: ${fn.password}

#The ${globals.port} sets the container port 4000 that should be mapped to the free outside port of the platform. This port must be open between client and server as a mandatory option to allow connections by NoMachine’s NX protocol.
  port: 4000

#The entry point onInstall event contains three custom actions executed one by one in actions section below.
onInstall:
  - getUser
  - installXWin
  - addEndpoint

#Custom getUser action is created to return a default container username that will be used to connect to a remote desktop. It is performed with cmd action on the required node. Here cmd performs whoami command in order to print to stdout the default template’s user. The result is stored in ${response.out} placeholder. 
actions:
  getUser:
      - cmd[${targetNodes.master.id}]: whoami
      - setGlobals:  
          userOut: ${response.out}
#Where the ${targetNodes.master.id} placeholder contains a target container id that will be returned after the container (node) is picked up in the installation dialogue.To return the result we use another setGlobals action that will allow to make the result visible within the global scope of manifest with ${globals.userOut} placeholder.

#The custom installXWin action executes a series of shell commands with help of cmd action on the same container: 
# 1. It installs X Window System and Gnome Display Manager with some associated packages and configuration operations performed.
# 2. Set a password for default container user.
# 3. Download the NoMachine package. 
# 4. Install NoMachine package
# 5. Add Mozilla Firefox web browser to the desktop
# 6. Gain user rights to the superuser with no password required to ensure the ability of any other software installation.
  installXWin:
      - cmd [${targetNodes.master.id}]:
          yum groupinstall -y "X Window System" "Fonts";
          yum install -y gnome-classic-session gnome-terminal nautilus-open-terminal control-center;
          unlink /etc/systemd/system/default.target;
          ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target;
          echo "${globals.userOut}:${globals.password}" | chpasswd; 
          wget https://download.nomachine.com/download/6.9/Linux/nomachine_6.9.2_1_x86_64.rpm;
          rpm -i nomachine_6.9.2_1_x86_64.rpm; 
          yum install -y firefox;
          sed -i "\$a${globals.userOut}\ ALL=NOPASSWD\:\ ALL" /etc/sudoers 
        user: root
#All mentioned commands in action cmd will be executed under user root. If you do not specify a user they will be performed under default container user.

#Custom addEndpoint action maps container open port defined by ${globals.port} placeholder to the outside world through Jelastic Shared Load Balancer. It is performed by api action with env.control.AddEndpoint method that requires a set of parameters to be passed:
#   -  container nodeId (e.g. defined by ${targetNodes.master.id}
#   -  container privatePort to be mapped (e.g. defined by ${globals.port})
#   -  protocol (e.g. TCP or UDP)
#   -  port mapping name (e.g. noMachine)
  addEndpoint:
    - api : env.control.AddEndpoint
      nodeId: ${targetNodes.master.id}
      privatePort: ${globals.port}
      protocol: TCP
      name: noMachine
    - setGlobals:  
        publicPort: ${response.object.publicPort}
#Success text that is displayed upon installation either at the Dashboard, or via email notification. It can be defined as plain text or Markdown syntax and may contain placeholders to provide credentials, URLs and other useful data
success: |
  Cloud desktop has been attached to your environment. Use mapped port instead of port 4000 in NoMachine connection parameters:
  
  **Host**: node${targetNodes.master.id}-${env.domain}  
  **Port**: ${globals.publicPort}  
  **Username**: ${globals.userOut}  
  **Password**: ${globals.password}   
